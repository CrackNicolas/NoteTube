import { FileTypeResult } from "file-type";

import { httpRequest } from "@/shared/logic/requests";
import { AntiMalware } from "@/backend/enums/anti_malware";

type PropsMalware = {
    fileBuffer: Buffer,
    type: FileTypeResult,
    file: File
}

export default async function malware(props: PropsMalware): Promise<AntiMalware> {
    const { fileBuffer, type, file } = props;

    try {
        const form: FormData = new FormData();
        const blob: Blob = new Blob([fileBuffer], { type: type.mime });
        form.append('file', blob, file.name);

        const responseUpload = await httpRequest({
            type: 'POST',
            url: 'https://www.virustotal.com/api/v3/files',
            body: form,
            config: {
                headers: {
                    accept: 'application/json',
                    'x-apikey': process.env.VIRUSTOTAL_API_KEY,
                }
            }
        });

        // Realiza una solicitud para obtener los resultados del anÃ¡lisis
        const responseAnalysis = await httpRequest({
            type: 'GET',
            url: `https://www.virustotal.com/api/v3/analyses/${responseUpload.data.data.id}`,
            config: {
                headers: {
                    accept: 'application/json',
                    'x-apikey': process.env.VIRUSTOTAL_API_KEY,
                }
            }
        });

        // Procesa la respuesta para ver si el archivo tiene virus
        const { stats } = responseAnalysis.data.data.attributes;

        return (stats && stats.malicious > 0) ? AntiMalware.VIRUS : AntiMalware.FREE;
    } catch (error: unknown) {
        return AntiMalware.ERROR;
    }
}